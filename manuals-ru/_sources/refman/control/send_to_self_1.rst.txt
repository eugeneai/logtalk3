..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**control construct**

.. index:: pair: (::)/1; Control construct
.. _control_send_to_self_1:

``(::)/1``
==========

Description
-----------

::

   ::Message

Sends a message to :term:`self`. Can only used in the body of a predicate
definition. The argument should match a :ref:`public <directives_public_1>`
or :ref:`protected <directives_protected_1>` predicate of *self*. It may
also match a :ref:`private <directives_private_1>` predicate
if the predicate is within the scope of the object where the method
making the call is defined, if imported from a category, if used from
within a category, or when using private inheritance. When the predicate
is declared but not defined, the message simply fails (as per the
:term:`closed-world assumption`).

The lookups for the message declaration and the corresponding method are
performed using a depth-first strategy. A message to *self* necessarily
implies the use of :term:`dynamic binding` but a caching mechanism is used
to improve performance in subsequent messages. See the User Manual section
on :ref:`performance <performance_performance>` for details.

Modes and number of proofs
--------------------------

::

   ::+callable - zero_or_more

Errors
------

| ``Message`` is a variable:
|     ``instantiation_error``
| ``Message`` is neither a variable nor a callable term:
|     ``type_error(callable, Message)``
| ``Message``, with predicate indicator ``Name/Arity``, is declared private:
|     ``permission_error(access, private_predicate, Name/Arity)``
| ``Message``, with predicate indicator ``Name/Arity``, is not declared:
|     ``existence_error(predicate_declaration, Name/Arity)``

Examples
--------

::

   area(Area) :-
       ::width(Width),
       ::height(Height),
       Area is Width * Height.

.. seealso::

   :ref:`control_send_to_object_2`,
   :ref:`control_call_super_1`,
   :ref:`control_delegate_message_1`
