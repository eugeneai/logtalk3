..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**built-in predicate**

.. index:: pair: threaded_cancel/1; Built-in predicate
.. _predicates_threaded_cancel_1:

``threaded_cancel/1``
=====================

Description
-----------

::

   threaded_cancel(Tag)

Cancels a tagged threaded call. When there is no asynchronous call with the
given tag, calling this predicate succeeds assuming the asynchronous call
have already terminated or canceled. The threaded call identifier tag is
generated by calls to the :ref:`threaded_call/2 <predicates_threaded_call_1_2>`
and :ref:`threaded_once/2 <predicates_threaded_once_1_2>` predicates. Tags
shall be regarded as an opaque term; users shall not rely on its type.

.. note::

   This predicate requires a :term:`backend Prolog compiler` providing
   compatible multi-threading primitives. The value of the read-only
   :ref:`threads <flag_threads>` flag is set to ``supported`` when that
   is the case.

Modes and number of proofs
--------------------------

::

   threaded_cancel(+nonvar) - one

Errors
------

| ``Tag`` is a variable:
|     ``instantiation_error``

Examples
--------

(none)

.. seealso::

   :ref:`predicates_threaded_call_1_2`,
   :ref:`predicates_threaded_exit_1_2`,
   :ref:`predicates_threaded_ignore_1`,
   :ref:`predicates_threaded_once_1_2`,
   :ref:`predicates_threaded_1`
