..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**built-in predicate**

.. index:: pair: abolish_events/5; Built-in predicate
.. _predicates_abolish_events_5:

``abolish_events/5``
====================

Description
-----------

::

   abolish_events(Event, Object, Message, Sender, Monitor)

Abolishes all matching events. The two types of events are represented
by the atoms ``before`` and ``after``. When the predicate is called with
the first argument unbound, both types of events are abolished.

Modes and number of proofs
--------------------------

::

   abolish_events(@term, @term, @term, @term, @term) - one

Errors
------

| ``Event`` is neither a variable nor a valid event identifier:
|     ``type_error(event, Event)``
| ``Object`` is neither a variable nor a valid object identifier:
|     ``type_error(object_identifier, Object)``
| ``Message`` is neither a variable nor a callable term:
|     ``type_error(callable, Message)``
| ``Sender`` is neither a variable nor a valid object identifier:
|     ``type_error(object_identifier, Sender)``
| ``Monitor`` is neither a variable nor a valid object identifier:
|     ``type_error(object_identifier, Monitor)``

Examples
--------

::

   % abolish all events for messages sent to the "list"
   % object being monitored by the "debugger" object:
   | ?- abolish_events(_, list, _, _, debugger).

.. seealso::

   :ref:`predicates_current_event_5`,
   :ref:`predicates_define_events_5`,
   :ref:`methods_before_3`,
   :ref:`methods_after_3`
