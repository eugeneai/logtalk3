..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**built-in predicate**

.. index:: pair: threaded_engine_create/3; Built-in predicate
.. _predicates_threaded_engine_create_3:

``threaded_engine_create/3``
============================

Description
-----------

::

   threaded_engine_create(AnswerTemplate, Goal, Engine)

Creates a new engine for proving the given goal and defines an answer
template for retrieving the goal solution bindings. A message queue for
passing arbitrary terms to the engine is also created. If the name for
the engine is not given, a unique name is generated and returned. Engine
names shall be regarded as opaque terms; users shall not rely on its
type.

.. note::

   This predicate requires a :term:`backend Prolog compiler` providing
   compatible multi-threading primitives. The value of the read-only
   :ref:`engines <flag_engines>` flag is set to ``supported`` when that
   is the case.

Modes and number of proofs
--------------------------

::

   threaded_engine_create(@term, @callable, @nonvar) - one
   threaded_engine_create(@term, @callable, --nonvar) - one

Errors
------

| ``Goal`` is a variable:
|     ``instantiation_error``
| ``Goal`` is neither a variable nor a callable term:
|     ``type_error(callable, Goal)``
| ``Engine`` is the name of an existing engine:
|     ``permission_error(create, engine, Engine)``

Examples
--------

::

   % create a new engine for finding members of a list:
   | ?- threaded_engine_create(X, member(X, [1,2,3]), worker_1).

.. seealso::

   :ref:`predicates_threaded_engine_destroy_1`,
   :ref:`predicates_threaded_engine_self_1`,
   :ref:`predicates_threaded_engine_1`,
   :ref:`predicates_threaded_engine_next_2`,
   :ref:`predicates_threaded_engine_next_reified_2`
