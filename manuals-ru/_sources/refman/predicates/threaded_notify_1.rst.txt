..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**built-in predicate**

.. index:: pair: threaded_notify/1; Built-in predicate
.. _predicates_threaded_notify_1:

``threaded_notify/1``
=====================

Description
-----------

::

   threaded_notify(Term)
   threaded_notify([Term| Terms])

Sends ``Term`` as a notification to any thread suspended waiting for it
in order to proceed. The call must be made within the same object
(:term:`this`) containing the calls to the
:ref:`predicates_threaded_wait_1` predicate waiting for the
notification. The argument may also be a list of notifications,
``[Term| Terms]``. In this case, all notifications in the list will be
sent to any threads suspended waiting for them in order to proceed.

.. note::

   This predicate requires a :term:`backend Prolog compiler` providing
   compatible multi-threading primitives. The value of the read-only
   :ref:`threads <flag_threads>` flag is set to ``supported`` when that
   is the case.

Modes and number of proofs
--------------------------

::

   threaded_notify(@term) - one
   threaded_notify(@list(term)) - one

Errors
------

(none)

Examples
--------

::

   % send a "data_available" notification:
   ..., threaded_notify(data_available), ...

.. seealso::

   :ref:`predicates_threaded_wait_1`
