..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**built-in predicate**

.. index:: pair: protocol_property/2; Built-in predicate
.. _predicates_protocol_property_2:

``protocol_property/2``
=======================

Description
-----------

::

   protocol_property(Protocol, Property)

Enumerates, by backtracking, the properties associated with the currently
defined protocols. The valid properties are listed in the language grammar
section on :ref:`entity properties <grammar_entity_properties>` and described
in the User Manual section on :ref:`protocol properties <protocols_properties>`.

Modes and number of proofs
--------------------------

::

   protocol_property(?protocol_identifier, ?protocol_property) - zero_or_more

Errors
------

| ``Protocol`` is neither a variable nor a valid protocol identifier:
|     ``type_error(protocol_identifier, Protocol)``
| ``Property`` is neither a variable nor a callable term:
|     ``type_error(callable, Property)``
| ``Property`` is a callable term but not a valid protocol property:
|     ``domain_error(protocol_property, Property)``

Examples
--------

::

   % enumerate the properties of the monitoring built-in protocol:
   | ?- protocol_property(monitoring, Property).
   
   Property = source_data ;
   Property = static ;
   Property = built_in ;
   ...

.. seealso::

   :ref:`predicates_abolish_protocol_1`,
   :ref:`predicates_create_protocol_3`,
   :ref:`predicates_current_protocol_1`,
   :ref:`predicates_conforms_to_protocol_2_3`,
   :ref:`predicates_extends_protocol_2_3`,
   :ref:`predicates_implements_protocol_2_3`
