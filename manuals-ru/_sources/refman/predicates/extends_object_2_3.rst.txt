..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**built-in predicate**

.. index:: pair: extends_object/2-3; Built-in predicate
.. _predicates_extends_object_2_3:

``extends_object/2-3``
======================

Description
-----------

::

   extends_object(Prototype, Parent)
   extends_object(Prototype, Parent, Scope)

Enumerates, by backtracking, all pairs of objects such that the first
one extends the second. The relation scope is represented by the atoms
``public``, ``protected``, and ``private``.

Modes and number of proofs
--------------------------

::

   extends_object(?object_identifier, ?object_identifier) - zero_or_more
   extends_object(?object_identifier, ?object_identifier, ?scope) - zero_or_more

Errors
------

| ``Prototype`` is neither a variable nor a valid object identifier:
|     ``type_error(object_identifier, Prototype)``
| ``Parent`` is neither a variable nor a valid object identifier:
|     ``type_error(object_identifier, Parent)``
| ``Scope`` is neither a variable nor an atom:
|     ``type_error(atom, Scope)``
| ``Scope`` is an atom but an invalid entity scope:
|     ``domain_error(scope, Scope)``

Examples
--------

::

   % enumerate objects derived from the state_space prototype:
   | ?- extends_object(Object, state_space).

   % enumerate objects publicly derived from the list prototype:
   | ?- extends_object(Object, list, public).

.. seealso::

   :ref:`predicates_current_object_1`,
   :ref:`predicates_instantiates_class_2_3`,
   :ref:`predicates_specializes_class_2_3`
