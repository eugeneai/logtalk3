..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**directive**

.. index:: pair: synchronized/1; Directive
.. _directives_synchronized_1:

``synchronized/1``
==================

Description
-----------

::

   synchronized(Name/Arity)
   synchronized((Name/Arity, ...))
   synchronized([Name/Arity, ...])

   synchronized(Name//Arity)
   synchronized((Name//Arity, ...))
   synchronized([Name//Arity, ...])

Declares synchronized predicates and synchronized grammar rule non-terminals.
The most common use is for predicates that have side effects (e.g. asserting
or retracting clauses for a dynamic predicate) in multi-threaded applications.
A synchronized predicate (or synchronized non-terminal) is protected by a
mutex in order to allow for thread synchronization when proving a call to
the predicate (or non-terminal).

All predicates (and non-terminals) declared in the same synchronized
directive share the same mutex. In order to use a separate mutex for
each predicate (non-terminal) so that they are independently synchronized,
a per-predicate synchronized directive must be used.

.. warning::

   Declaring a predicate synchronized implicitly makes it **deterministic**.
   When using a single-threaded :term:`backend Prolog compiler`, calls
   to synchronized predicates behave as wrapped by the standard
   :ref:`methods_once_1` meta-predicate.

Note that synchronized predicates cannot be declared
:ref:`dynamic <directives_dynamic_1>` (when necessary, declare the
predicates updating the dynamic predicates as synchronized).

Template and modes
------------------

::

   synchronized(+predicate_indicator_term)
   synchronized(+non_terminal_indicator_term)

Examples
--------

::

   :- synchronized(db_update/1).

   :- synchronized((write_stream/2, read_stream/2)).

   :- synchronized([add_to_queue/2, remove_from_queue/2]).

.. seealso::

   :ref:`methods_predicate_property_2`
