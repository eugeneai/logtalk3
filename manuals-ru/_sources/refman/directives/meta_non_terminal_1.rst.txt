..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**directive**

.. index:: pair: meta_non_terminal/1; Directive
.. _directives_meta_non_terminal_1:

``meta_non_terminal/1``
=======================

Description
-----------

::

   meta_non_terminal(Template)
   meta_non_terminal((Template, ...))
   meta_non_terminal([Template, ...])

   meta_non_terminal(Entity::Template)
   meta_non_terminal((Entity::Template, ...))
   meta_non_terminal([Entity::Template, ...])

   meta_non_terminal(Module:Template)
   meta_non_terminal((Module:Template, ...))
   meta_non_terminal([Module:Template, ...])

Declares meta-non-terminals, i.e., non-terminals that have arguments
that will be called as non-terminals (or grammar rule bodies). An
argument may also be a :term:`closure` instead of a goal if the
non-terminal uses the :ref:`methods_call_1` Logtalk built-in
methods to construct and call the actual non-terminal from the closure
and the additional arguments.

Meta-arguments which are non-terminals are represented by the integer
``0``. Meta-arguments which are closures are represented by a positive
integer, ``N``, representing the number of additional arguments that
will be appended to the closure in order to construct the corresponding
meta-call. Normal arguments are represented by the atom ``*``.
Meta-arguments are always called in the meta-non-terminal calling
context, not in the meta-non-terminal definition context.

Template and modes
------------------

::

   meta_non_terminal(+meta_non_terminal_template_term)

   meta_non_terminal(+object_identifier::+meta_non_terminal_template_term)
   meta_non_terminal(+category_identifier::+meta_non_terminal_template_term)

   meta_non_terminal(+module_identifier:+meta_non_terminal_template_term)

Examples
--------

::

   :- meta_non_terminal(phrase(1, *)).
   phrase(X, T) --> call(X, T).

.. seealso::

   :ref:`directives_meta_predicate_1`,
   :ref:`methods_predicate_property_2`
