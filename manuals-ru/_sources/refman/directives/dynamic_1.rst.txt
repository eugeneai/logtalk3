..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**directive**

.. index:: pair: dynamic/1; Directive
.. _directives_dynamic_1:

``dynamic/1``
=============

Description
-----------

::

   dynamic(Name/Arity)
   dynamic((Name/Arity, ...))
   dynamic([Name/Arity, ...])

   dynamic(Entity::Name/Arity)
   dynamic((Entity::Name/Arity, ...))
   dynamic([Entity::Name/Arity, ...])

   dynamic(Module:Name/Arity)
   dynamic((Module:Name/Arity, ...))
   dynamic([Module:Name/Arity, ...])

   dynamic(Name//Arity)
   dynamic((Name//Arity, ...))
   dynamic([Name//Arity, ...])

   dynamic(Entity::Name//Arity)
   dynamic((Entity::Name//Arity, ...))
   dynamic([Entity::Name//Arity, ...])

   dynamic(Module:Name//Arity)
   dynamic((Module:Name//Arity, ...))
   dynamic([Module:Name//Arity, ...])

Declares dynamic predicates and dynamic grammar rule non-terminals. Note
that an object can be static and have both static and dynamic
predicates/non-terminals. When the dynamic predicates are local to an object,
declaring them also as :ref:`private predicates <directives_private_1>`
allows the Logtalk compiler to generate optimized code for asserting and
retracting predicate clauses. Categories can also contain dynamic predicate
directives but cannot contain clauses for dynamic predicates.

The predicate indicators (or non-terminal indicators) can be explicitly
qualified with an object, category, or module identifier when the predicates
(or non-terminals) are also declared :ref:`multifile <directives_multifile_1>`.

Note that dynamic predicates cannot be declared synchronized (when
necessary, declare the predicates updating the dynamic predicates as
:ref:`synchronized <directives_synchronized_1>`).

.. warning::

   Some backend Prolog compilers declare the atom ``dynamic`` as an
   operator for a lighter syntax. But this makes the code non-portable
   and is therefore a practice best avoided.

Template and modes
------------------

::

   dynamic(+qualified_predicate_indicator_term)
   dynamic(+qualified_non_terminal_indicator_term)

Examples
--------

::

   :- dynamic(counter/1).

   :- dynamic((lives/2, works/2)).

   :- dynamic([db/4, key/2, file/3]).

.. seealso::

   :ref:`directives_dynamic_0`,
   :ref:`methods_predicate_property_2`
