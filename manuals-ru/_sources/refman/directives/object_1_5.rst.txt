..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**directive**

.. index:: pair: object/1-5; Directive
.. _directives_object_1_5:

``object/1-5``
==============

Description
-----------

*Stand-alone objects (prototypes)*

::

   object(Object)

   object(Object,
       implements(Protocols))

   object(Object,
       imports(Categories))

   object(Object,
       implements(Protocols),
       imports(Categories))

*Prototype extensions*

::

   object(Object,
       extends(Objects))

   object(Object,
       implements(Protocols),
       extends(Objects))

   object(Object,
       imports(Categories),
       extends(Objects))

   object(Object,
       implements(Protocols),
       imports(Categories),
       extends(Objects))

*Class instances*

::

   object(Object,
       instantiates(Classes))

   object(Object,
       implements(Protocols),
       instantiates(Classes))

   object(Object,
       imports(Categories),
       instantiates(Classes))

   object(Object,
       implements(Protocols),
       imports(Categories),
       instantiates(Classes))

*Classes*

::

   object(Object,
       specializes(Classes))

   object(Object,
       implements(Protocols),
       specializes(Classes))

   object(Object,
       imports(Categories),
       specializes(Classes))

   object(Object,
       implements(Protocols),
       imports(Categories),
       specializes(Classes))

*Classes with metaclasses*

::

   object(Object,
       instantiates(Classes),
       specializes(Classes))

   object(Object,
       implements(Protocols),
       instantiates(Classes),
       specializes(Classes))

   object(Object,
       imports(Categories),
       instantiates(Classes),
       specializes(Classes))

   object(Object,
       implements(Protocols),
       imports(Categories),
       instantiates(Classes),
       specializes(Classes))

Starting object directive.

Template and modes
------------------

*Stand-alone objects (prototypes)*

::

   object(+object_identifier)

   object(+object_identifier,
       implements(+implemented_protocols))

   object(+object_identifier,
       imports(+imported_categories))

   object(+object_identifier,
       implements(+implemented_protocols),
       imports(+imported_categories))

*Prototype extensions*

::

   object(+object_identifier,
       extends(+extended_objects))

   object(+object_identifier,
       implements(+implemented_protocols),
       extends(+extended_objects))

   object(+object_identifier,
       imports(+imported_categories),
       extends(+extended_objects))

   object(+object_identifier,
       implements(+implemented_protocols),
       imports(+imported_categories),
       extends(+extended_objects))

*Class instances*

::

   object(+object_identifier,
       instantiates(+instantiated_objects))

   object(+object_identifier,
       implements(+implemented_protocols),
       instantiates(+instantiated_objects))

   object(+object_identifier,
       imports(+imported_categories),
       instantiates(+instantiated_objects))

   object(+object_identifier,
       implements(+implemented_protocols),
       imports(+imported_categories),
       instantiates(+instantiated_objects))

*Classes*

::

   object(+object_identifier,
       specializes(+specialized_objects))

   object(+object_identifier,
       implements(+implemented_protocols),
       specializes(+specialized_objects))

   object(+object_identifier,
       imports(+imported_categories),
       specializes(+specialized_objects))

   object(+object_identifier,
       implements(+implemented_protocols),
       imports(+imported_categories),
       specializes(+specialized_objects))

*Class with metaclasses*

::

   object(+object_identifier,
       instantiates(+instantiated_objects),
       specializes(+specialized_objects))

   object(+object_identifier,
       implements(+implemented_protocols),
       instantiates(+instantiated_objects),
       specializes(+specialized_objects))

   object(+object_identifier,
       imports(+imported_categories),
       instantiates(+instantiated_objects),
       specializes(+specialized_objects))

   object(+object_identifier,
       implements(+implemented_protocols),
       imports(+imported_categories),
       instantiates(+instantiated_objects),
       specializes(+specialized_objects))

Examples
--------

::

   :- object(list).

   :- object(list,
       implements(listp)).

   :- object(list,
       extends(compound)).

   :- object(list,
       implements(listp),
       extends(compound)).

   :- object(object,
       imports(initialization),
       instantiates(class)).

   :- object(abstract_class,
       instantiates(class),
       specializes(object)).

   :- object(agent,
       imports(private::attributes)).

.. seealso::

   :ref:`directives_end_object_0`
