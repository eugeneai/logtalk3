..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**directive**

.. index:: pair: alias/2; Directive
.. _directives_alias_2:

``alias/2``
===========

Description
-----------

::

   alias(Entity, [Name/Arity as Alias/Arity, ...])
   alias(Entity, [Name//Arity as Alias//Arity, ...])

Declares predicate and grammar rule non-terminal aliases. A predicate
(non-terminal) alias is an alternative name for a predicate
(non-terminal) declared or defined in an extended protocol, an
implemented protocol, an extended category, an imported category, an
extended prototype, an instantiated class, or a specialized class.
Predicate aliases may be used to solve conflicts between imported or
inherited predicates. It may also be used to give a predicate
(non-terminal) a name more appropriated in its usage context. This
directive may be used in objects, protocols, and categories.

Predicate (and non-terminal) aliases are specified using (preferably)
the notation ``Name/Arity as Alias/Arity`` or, in alternative, the
notation ``Name/Arity::Alias/Arity``.

It is also possible to declare predicate and grammar rule non-terminal
aliases in implicit qualification directives for sending messages
to objects and calling module predicates.

Template and modes
------------------

::

   alias(@entity_identifier, +list(predicate_indicator_alias))
   alias(@entity_identifier, +list(non_terminal_indicator_alias))

Examples
--------

::

   % resolve a predicate name conflict:
   :- alias(list, [member/2 as list_member/2]).
   :- alias(set,  [member/2 as set_member/2]).

   % define an alternative name for a non-terminal:
   :- alias(words, [singular//0 as peculiar//0]).

.. seealso::

   :ref:`directives_uses_2`,
   :ref:`directives_use_module_2`,
   :ref:`directives_uses_1`
