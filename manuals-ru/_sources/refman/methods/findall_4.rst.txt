..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**built-in method**

.. index:: pair: findall/4; Built-in method
.. _methods_findall_4:

``findall/4``
=============

Description
-----------

::

   findall(Template, Goal, List, Tail)

Variant of the :ref:`methods_findall_3` method that allows passing the
tail of the results list. It succeeds returning the tail argument when
the goal has no solutions.

This built-in meta-predicate is declared as a private method and thus
cannot be used as a message to an object.

Modes and number of proofs
--------------------------

::

   findall(?term, +callable, ?list, ?term) - zero_or_one

Errors
------

| ``Goal`` is a variable:
|     ``instantiation_error``
| ``Goal`` is neither a variable nor a callable term:
|     ``type_error(callable, Goal)``
| ``Goal`` is a call to a non-existing predicate:
|     ``existence_error(procedure, Predicate)``

Examples
--------

| To find all solutions in the context of the object or category containing the call:
|     ``findall(Template, Goal, List, Tail)``
| To find all solutions of sending a message to :term:`self`:
|     ``findall(Template, ::Message, List, Tail)``
| To find all solutions of sending a message to an explicit object:
|     ``findall(Template, Object::Message, List, Tail)``

.. seealso::

   :ref:`methods_bagof_3`,
   :ref:`methods_findall_3`,
   :ref:`methods_forall_2`,
   :ref:`methods_setof_3`
