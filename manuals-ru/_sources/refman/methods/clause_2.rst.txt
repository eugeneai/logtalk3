..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**built-in method**

.. index:: pair: clause/2; Built-in method
.. _methods_clause_2:

``clause/2``
============

Description
-----------

::

   clause(Head, Body)

Enumerates, by backtracking, the clauses of a dynamic predicate.

When the predicate indicator for ``Head`` is declared in a
:ref:`directives_uses_2` or :ref:`directives_use_module_2` directive,
the predicate enumerates the clauses in the referenced object or module.
When the backend Prolog compiler supports a module system, the head
argument can also be module qualified.

This method may be used to enumerate clauses for predicates that are not
declared dynamic for dynamic objects provided that the predicates are
declared in :term:`this`.

Modes and number of proofs
--------------------------

::

   clause(+callable, ?body) - zero_or_more

Errors
------

| ``Head`` is a variable:
|     ``instantiation_error``
| ``Head`` is a neither a variable nor a callable term:
|     ``type_error(callable, Head)``
| ``Body`` is a neither a variable nor a callable term:
|     ``type_error(callable, Body)``
| The predicate indicator of ``Head``, ``Name/Arity``, is that of a private predicate:
|     ``permission_error(access, private_predicate, Name/Arity)``
| The predicate indicator of ``Head``, ``Name/Arity``, is that of a protected predicate:
|     ``permission_error(access, protected_predicate, Name/Arity)``
| The predicate indicator of ``Head``, ``Name/Arity``, is that of a static predicate:
|     ``permission_error(access, static_predicate, Name/Arity)``
| ``Head`` is not a declared predicate:
|     ``existence_error(predicate_declaration, Name/Arity)``

Examples
--------

| To retrieve a matching clause of a local dynamic predicate or a dynamic predicate in :term:`this`:
|     ``clause(Head, Body)``
| To retrieve a matching clause of a public or protected dynamic predicate in :term:`self`:
|     ``::clause(Head, Body)``
| To retrieve a matching clause of a public dynamic predicate in an explicit object:
|     ``Object::clause(Head, Body)``

.. seealso::

   :ref:`methods_abolish_1`,
   :ref:`methods_asserta_1`,
   :ref:`methods_assertz_1`,
   :ref:`methods_retract_1`,
   :ref:`methods_retractall_1`
   :ref:`directives_dynamic_0`,
   :ref:`directives_dynamic_1`,
   :ref:`directives_uses_2`,
   :ref:`directives_use_module_2`
