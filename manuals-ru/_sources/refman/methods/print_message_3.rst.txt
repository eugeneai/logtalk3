..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. rst-class:: align-right

**built-in method**

.. index:: pair: print_message/3; Built-in method
.. _methods_print_message_3:

``print_message/3``
===================

Description
-----------

::

   print_message(Kind, Component, Term)

Built-in method for printing a message represented by a term, which is
converted to the message text using the
:ref:`logtalk::message_tokens(Term, Component) <methods_message_tokens_2>`
hook non-terminal. This method is declared in the
:ref:`logtalk <apis:logtalk/0>` built-in
object as a public predicate. The line prefix and the output stream used
for each ``Kind-Component`` pair can be found using the
:ref:`logtalk::message_prefix_stream(Kind, Component, Prefix, Stream) <methods_message_prefix_stream_4>`
hook predicate.

This predicate starts by converting the message term to a list of tokens
and by calling the
:ref:`logtalk::message_hook(Message, Kind, Component, Tokens) <methods_message_hook_4>`
hook predicate. If this predicate succeeds, the ``print_message/3``
predicate assumes that the message have been successfully printed.

By default: messages of kind ``debug`` or ``debug(_)`` are only printed when
the ``debug`` flag is turned on; messages of kind ``banner``, ``comment``, or
``comment(_)`` are only printed when the ``report`` flag is set to ``on``;
messages of kind ``warning`` and ``warning(_)`` are not printed when the
``report`` flag is set to ``off``; messages of kind ``silent`` and ``silent()``
are not printed (but can be intercepted).

Modes and number of proofs
--------------------------

::

   print_message(+nonvar, +nonvar, +nonvar) - one

Errors
------

(none)

Examples
--------

::

   ..., logtalk::print_message(information, core, redefining_entity(object, foo)), ...

.. seealso::

   :ref:`methods_message_hook_4`,
   :ref:`methods_message_prefix_stream_4`,
   :ref:`methods_message_tokens_2`,
   :ref:`methods_print_message_tokens_3`,
   :ref:`methods_print_message_token_4`,
   :ref:`methods_ask_question_5`,
   :ref:`methods_question_hook_6`,
   :ref:`methods_question_prompt_stream_4`
