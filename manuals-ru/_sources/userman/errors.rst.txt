..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. _errors_errors:

Обработка ошибок
================

Обработка ошибок выполняется в Logtalk с помощью стандартных предикатов ``catch/3`` и ``throw/1`` [ISO95]_, кроме того, есть набор встроенных методов, упрощающих порождение ошибок, декорируемых в текущим контекстом (совокупностью взаимодействующих сущностей).

Ошибки, порождаемые Logtalk, как правило, имеют следующий формат:

::

   error(Error, logtalk(Goal, ExecutionContext))

В этой структуре-исключении ``Goal`` - цель, которая вызвала ошибку, ``Error`` и ``ExecutionContext`` - контекст, в котором ``Goal`` была вызвана. Например:

::

   error(
       permission_error(modify,private_predicate,p),
       logtalk(foo::abolish(p/0), _)
   )

Обратите внимание, что ``Goal`` and ``ExecutionContext`` могут быть несвязанными или только частично конкретизированными. Такое случается, когда соответствующая информация недоступна, например, из-за выполненной компилятором оптимизации, в результате которой существенная информация о контексте ошибки была удалена. Аргумент ``ExecutionContext`` является непонятным на первый взгляд термом, но его можно задекодировать при помощи предиката :ref:`logtalk::execution_context/7 <logtalk/0::execution_context/7>.

Порождение исключения
---------------------

Раздел :ref:`error handling section <error_handling_methods>` в справочнике  содержит список встроенных методов, порождающих терм-исключение ``error/2`` с подходящим контекстом в качестве аргумента. Например, вместо ручного создания ошибки типа, как в:

::

   ...,
   context(Context),
   throw(error(type_error(atom, 42), Context)).

можно просто написать:

::

   ...,
   type_error(atom, 42).

Предоставленные встроенные методы обработки ошибок охватывают все стандартные типы ошибок, перечисленные в стандарте ISO Prolog Core.

Проверка типа
-------------

Один из наиболее распространенных случаев, порождающих ошибки, - это проверка типов аргументов предиката и входных данных перед их обработкой.
Стандартная библиотека включает в себя объект :ref:`type <apis:type/0>`, при помощи которого задается обширный набор типов вместе с предикатами для тестирования свойств и верификации термов. Набор типов можно дополнять: новые типы задаются при помощи добавления новых утверждений для предикатов ``type/1`` и ``check/2``, которые являются мультифайловыми. Например, разработаем проверку *температуры*, выраженную в шкалах Цельсия, Фаренгейта или Кельвина. Начнем с объявления в объекте или категории нового типа:

::

   :- multifile(type::type/1).
   type::type(temperature(_Unit)).

Далее нам нужно реализовать программный код, проверяющий, что температура корректна. Поскольку разные шкалы используют разное значение для абсолютного нуля, запишем:

::

   :- multifile(type::check/2).
   type::check(temperature(Unit), Term) :-
       check_temperature(Unit, Term).

   % полагая, что температура имеет только нижнюю границу, используем библиотеку
   % property/2 для задания необходимого выражения для каждой единицы измерения температуры
   check_temperature(celsius, Term) :-
       type::check(property(float, [Temperature]>>(Temperature >= -273.15)), Term).
   check_temperature(fahrenheit, Term) :-
       type::check(property(float, [Temperature]>>(Temperature >= -459.67)), Term).
   check_temperature(kelvin, Term) :-
       type::check(property(float, [Temperature]>>(Temperature >= 0.0)), Term).

Сначала проверяется, что это значение с плавающей запятой, а затем уже, что оно находится в ожидаемом интервале. Но как используется этот новый тип? Если надо проверить, является ли температура корректной, используем:

::

   ..., type::valid(temperature(celsius), 42.0), ...

Предикат :ref:`type::valid/2 <apis:type/0::valid/2>` успешен или нет - зависит от второго аргумента, подходящего под тип, указанный в первом аргументе. Если вместо успеха или неудачи надо сгенерировать ошибку с указанием недопустимого значения, используем предикат :ref:`type::check/2 <apis:type/0::check/2>` вместо:

::

   ..., type::check(temperature(celsius), 42.0), ...

Если требуется терм-исключение ``error/2`` с контекстом ошибки, используем вместо него предикат :ref:`type::check/3 <apis:type/0::check/3>`:

::

   ...,
   context(Context),
   type::check(temperature(celsius), 42.0, Context),
   ...

Обратите внимание, что вызовы ``context/1`` встроены (inlined) и отправляют сообщения к библиотечному объекту ``type`` в режиме статического связывания (:term:`static binding`), если программа была скомпилирована со включенным флагом :ref:`optimize flag <flag_optimize>`, что обеспечивает эффективную проверку типов.

Ожидаемые термы
---------------

Поддержка представления и обработки *ожидаемых термов* обеспечивается
библиотекой :doc:`../libraries/expecteds`. Ожидаемые термы позволяют откладывать ошибки на более позднее время исполнения приложения, вместо генерирования исключения как только ошибка обнаружена.

Предупреждения и ошибки во время компиляции
-------------------------------------------

Настоящая версия компилятора Logtalk использует стандартный предикат ``read_term/3`` для чтения и компиляции исходного файла Logtalk. Это улучшает совместимость с:term:`backend Prolog compilers <backend Prolog compiler>` и закрытыми синтаксическими расширениями, причудами соответствия стандартнам. Но одним из последствий такого дизайна является то, что недопустимые по структуре термы Prolog или синтаксические ошибки прерывают процесс компиляции, пользователю выдается непонятная информация из-за присущих предикату ``read_term/3`` ограничений.

Предполагая, что все термины в исходном файле имеют правильную структуру, существует набор синтаксических и смысловых ошибок, которые компилятор попытается распознать. Объем технической информации об ошибках зависит от используемых флагов компилятора (подробности в разделе :ref:`programming_flags` этого руководства).

.. _errors_unknown:

Неизвестные сущности
~~~~~~~~~~~~~~~~~~~~

Компилятор Logtalk предупреждает об объектах, на которые кто-то ссылается, но он в данный момент еще не загружен. Предупреждение может указывать на орфографическую ошибку в имени объекта или указать просто сущность, которая будет загружена позже. 
По возможности следует избегать загрузки вне определенного порядка, поскольку это не дает делать полноценную оптимизацию кода, например, статическое связывание :term:`static binding` сообщений с методами.

.. _errors_singletons:

Переменные, использованные только раз
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Одинокие переменные (singleton variables) в тексте правила часто появляются из-за ошибок в их имени, - это одна из наиболее распространенных ошибок при программировании в Prolog.
Если реализация предиката ``read_term/3`` базового компилятора Prolog-а (:term:`backend Prolog compiler`) поддерживает настройку ``singleletons/1``, то компилятор будет предупреждать о любой обнаруженной одинокой переменной.

.. _errors_prolog:

Переопределение встроенных в Prolog предикатов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Компилятор Logtalk предупредит о попытке переопределения встроенных предикатов Prolog внутри объекта или категории. Иногда переопределение является преднамеренным. В других случаях пользователь может не знать, что конкретный компилятор :term:(`backend Prolog compiler`) уже предоставляет предикат в качестве встроенного или, возможно, надо обеспечить переносимость кода среди нескольких компиляторов Prolog с разными наборами встроенных предикатов.

.. _errors_redefinition_predicates:

Переопределение встроенных предикатов Logtalk
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Подобно переопределению встроенных предикатов Prolog, компилятор Logtalk
предупредит, если осуществляется попытка переопределить встроенный предикат Logtalk. Однако такое переопределение, вероятно, будет ошибкой в большинстве случаев.

.. _errors_redefinition_methods:

Переопределение встроенных методов Logtalk
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

При попытке переопределить встроенный метод в Logtalk-сущности будет выдана ошибка. По умолчанию компилятор сообщит об ошибке и прервет трансляцию объекта-нарушителя.

.. _errors_misspell:

Неправильные имена вызовов локальных предикатов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Если Logtalk обнаружит в теле предиката вызов локального предиката, который не определен, не является встроенным (в Прологе или в Logtalk) или объявленным как динамический, то будет выдано предупреждение. В большинстве случаев такие вызовы являются простыми ошибками орфографии.

.. _errors_portability:

Предупреждения о переносимости
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Предупреждение генерируется, если тело предиката содержит вызовы нестандартных встроенных предикатов или арифметических функции, оно также выдается при использовании нестандартных флагов или их значений. Эти предупреждения, как правило, нельзя избежать из-за ограниченной области стандартизации ISO Prolog.

.. _errors_deprecated:

Устаревшие элементы
~~~~~~~~~~~~~~~~~~~

При использовании устаревшей директивы, управляющей конструкции или предиката будет выдано соответствующее предупреждение. Эти предупреждения должны быть исправлены как можно скорее, поскольку поддержка любых устаревших функций, скорее всего, будет прекращена в будущих версиях.

.. _errors_missing_directives:

Отсутствующие директивы
~~~~~~~~~~~~~~~~~~~~~~~

Для любой отсутствующей директивы предиката dynamic, discontinuous, meta-predicate и public будет выдано предупреждение.

.. _errors_duplicated_directives:

Дублированные директивы
~~~~~~~~~~~~~~~~~~~~~~~

Для любых дублированных директив scope, multifile, dynamic, discontinuous, meta-predicate и meta-non-terminal будет выдано предупреждение. Обратите внимание, что конфликтующие директивы для одного и того же предиката обрабатываются как ошибки, а не как предупреждения о дублировании.

.. _errors_duplicated_clauses:

Дублирующиеся утверждения
~~~~~~~~~~~~~~~~~~~~~~~~~

Предупреждение будет выдано, если в сущности будут замечены дублирующиеся утверждения. Однако эта проверка является сложной с точки зрения вычислений и по умолчанию обычно отключена.

.. _errors_always_true_or_false_goals:

Цели, которые всегда являются истинными или ложными
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Предупреждение будет выдано для целей, которые всегда истинны или ложны.
Обычно это вызвано опечатками в коде. Например: ``X == y`` вместо ``X == Y``.

.. _errors_trivial_fails:

Тривиальные неудачи
~~~~~~~~~~~~~~~~~~~

При любом вызове локального статического предиката без унифицируемого ему утверждения будет выдано предупреждение.

.. _errors_suspicious_calls:

Подозрительные вызовы
~~~~~~~~~~~~~~~~~~~~~

Предупреждение будет выдано для вызовов, являющихся синтаксически правильными, но, вероятно, содержащими семантическую ошибку. Примером является вызов :ref:`control_send_to_self_1` в утверждениях, которые, по-видимому, предназначены для реализации рекурсивных определений предикатов, где пользователь намеревается вызвать определение локального предиката.

.. _errors_lambda_variables:

Лямбда-переменные
~~~~~~~~~~~~~~~~

??Предупреждение будет выдано в случае выявления :term:`lambda expressions <lambda expression>` с неклассифицированными переменными (не указанными как :term:`lambda free <lambda free variable>` или :term:`lambda parameter`), для переменных, играющих двойственную роль (и как свободные lambda-переменные, так и lambda-параметры), так и для параметров lambda-функций, используемых в других местах утверждения.

.. _errors_predicate_redefinition:

Переопределение предикатов, объявленных в директивах ``uses/2`` или ``use_module/2``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

При любой попытке определения локального предиката, который был импортирован из библиотеки :ref:`directives_uses_2` или :ref:`directives_use_module_2` будет сообщено об ошибке.

.. _errors_others:

Прочие предупреждения и ошибки
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Компилятор Logtalk выдаст ошибку, если найдет утверждение в предикате или директиву, которые невозможно странслировать. Поведение по умолчанию заключается в выводе ошибки и прерывании компиляции.

.. _errors_runtime:

Ошибки времени исполнения
-------------------------

В этом разделе кратко описываются ошибки времени исполнения, возникающие в результате неправильного использования встроенных предикатов Logtalk, встроенных методов или из-за неправильной посылки сообщения.
Для получения подробного описания ошибок времени исполнения, пожалуйста, обратитесь к справочному руководству.

.. _errors_predicates:

Встроенные предикаты Logtalk
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Большинство встроенных предикатов Logtalk проверяют тип и режим использования аргументов, генерируя исключение в случае неправильного их использования.

.. _errors_methods:

Встроенные методы Logtalk
~~~~~~~~~~~~~~~~~~~~~~~~~

Большинство встроенных методов Logtalk проверяет тип и режим использования аргументов, порождая исключение в случае их неправильного использования.

.. _errors_sending:

Отправка сообщений
~~~~~~~~~~~~~~~~~~

Механизмы отправки сообщений всегда проверяют, является ли получатель сообщения определенным объектом и соответствует ли оно декларированному предикату в области видимости отправителя. Встроенный протокол :ref:`forwarding <apis:forwarding/0>` объявляет предикат :ref:`methods_forward_1`, который автоматически вызывается (если, конечно, был определен) средой исполнения при перехвате факта посылки сообщения к объекту, который его не понимает.
Обычным определением для этого обработчика ошибок является делегирование или пересылка сообщения другому объекту, который мог бы ответить на него:

::

   forward(Message) :-
       % переслать сообщение с сохранением отправителя
       [Object::Message].

Если сохранение информации об отправителе не требуется, это определение упрощается следующим образом:

::

   forward(Message) :-
       Object::Message.

Разумеется, возможны более сложные определения.
