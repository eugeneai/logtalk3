..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. _protocols_protocols:

Protocols
=========

Protocols enable the separation between interface and implementation:
several objects can implement the same protocol and an object can
implement several protocols. Protocols may contain only predicate
declarations. In some languages the term *interface* is used with
similar meaning. Logtalk allows predicate declarations of any scope
within protocols, contrary to some languages that only allow public
declarations.

Logtalk defines three built-in protocols,
:ref:`monitoring <apis:monitoring/0>`,
:ref:`expanding <apis:expanding/0>`, and
:ref:`forwarding <apis:forwarding/0>`, which are described at the
end of this section.

.. _protocols_defining:

Defining a new protocol
-----------------------

We can define a new protocol in the same way we write Prolog code: by
using a text editor. Исходные файлы Logtalk могут содержать один или несколько
объектов, категори1 и протоколов. If you prefer to define each entity
in its own source file, it is recommended that the file be named after
the protocol. По умолчанию все исходные файлы Logtalk используют расширение
``.lgt``, однако, это можно поменять в файлах-адаптерах конкретных систем Prolog-программирования.
Промежуточные исходные файлы Prolog, генерируемые компилятором Logtalk,
по умолчанию имеют суффикс ``_lgt`` и расширение ``.pl``. Опять же, это можно настроить в соответствии с потребностями конкретного компилятора Prolog в соответствующем файле-адаптере. For example, we may define a protocol named
``listp`` and save it in a ``listp.lgt`` source file that will be
compiled to a ``listp_lgt.pl`` Prolog file (depending on the backend
compiler, the names of the intermediate Prolog files may include a
directory hash and a process identifier to prevent file name clashes
when embedding Logtalk applications or running parallel Logtalk processes).

Protocol names must be atoms. Objects, categories and protocols share
the same namespace: we cannot have a protocol with the same name as an
object or a category.

Protocol directives are textually encapsulated by using two Logtalk
directives: :ref:`directives_protocol_1_2` and
:ref:`directives_end_protocol_0`. The
most simple protocol will be one that is self-contained, not depending
on any other Logtalk entity:

::

   :- protocol(Protocol).
       ...
   :- end_protocol.

If a protocol extends one or more protocols, then the opening directive
will be:

::

   :- protocol(Protocol,
       extends([Protocol1, Protocol2, ...])).
       ...
   :- end_protocol.

In order to maximize protocol reuse, all predicates specified in a
protocol should relate to the same functionality. Therefore, the only
recommended use of protocol extension is when you need both a minimal
protocol and an extended version of the same protocol with additional,
convenient predicates.

.. _protocols_finding:

Finding defined protocols
-------------------------

We can find, by backtracking, all defined protocols by using the
:ref:`predicates_current_protocol_1` built-in predicate with a
unbound argument:

.. code-block:: text

   | ?- current_protocol(Protocol).

This predicate can also be used to test if a protocol is defined by
calling it with a valid protocol identifier (an atom).

.. _protocols_creating:

Creating a new protocol in runtime
----------------------------------

We can create a new (dynamic) protocol at runtime by calling the Logtalk
built-in predicate :ref:`predicates_create_protocol_3`:

.. code-block:: text

   | ?- create_protocol(Protocol, Relations, Directives).

The first argument should be either a variable or the name of the new
protocol (a Prolog atom, which must not match an existing entity name).
The remaining two arguments correspond to the relations described in the
opening protocol directive and to the protocol directives.

For instance, the call:

.. code-block:: text

   | ?- create_protocol(ppp, [extends(qqq)], [public([foo/1, bar/1])]).

is equivalent to compiling and loading the protocol:

::

   :- protocol(ppp,
       extends(qqq)).

       :- dynamic.

       :- public([foo/1, bar/1]).

   :- end_protocol.

If we need to create a lot of (dynamic) protocols at runtime, then is
best to define a metaclass or a prototype with a predicate that will
call this built-in predicate in order to provide more sophisticated
behavior.

.. _protocols_abolishing:

Abolishing an existing protocol
-------------------------------

Dynamic protocols can be abolished using the
:ref:`predicates_abolish_protocol_1` built-in predicate:

.. code-block:: text

   | ?- abolish_protocol(Protocol).

The argument must be an identifier of a defined dynamic protocol,
otherwise an error will be thrown.

Protocol directives
-------------------

Protocol directives are used to define protocol properties and
documentation.

.. _protocols_dynamic:

Dynamic protocols
~~~~~~~~~~~~~~~~~

As usually happens with Prolog code, a protocol can be either static or
dynamic. A protocol created during the execution of a program is always
dynamic. A protocol defined in a file can be either dynamic or static.
Dynamic protocols are declared by using the
:ref:`directives_dynamic_0` directive in the protocol source code:

::

   :- dynamic.

The directive must precede any predicate directives. Please be aware
that using dynamic code results in a performance hit when compared to
static code. We should only use dynamic protocols when these need to be
abolished during program execution.

.. _protocols_documentation:

Protocol documentation
~~~~~~~~~~~~~~~~~~~~~~

A protocol can be documented with arbitrary user-defined information
by using the :ref:`directives_info_1` entity directive. Смотрите раздел
:ref:`documenting_documenting` для получения подробной информации.

.. _protocols_include:

Loading files into a protocol
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :ref:`directives_include_1` directive
can be used to load the contents of a file into a protocol. Смотрите раздел :ref:`objects_objects`, где приведен пример использования этой
директивы.

.. _protocols_relationships:

Protocol relationships
----------------------

Logtalk provides two sets of built-in predicates that enable us to query
the system about the possible relationships that a protocol have with
other entities.

The :ref:`predicates_extends_protocol_2_3` built-in predicates return all
pairs of protocols so that the first one extends the second:

.. code-block:: text

   | ?- extends_protocol(Protocol1, Protocol2).

или, если нужно также пространство имен:

.. code-block:: text

   | ?- extends_protocol(Protocol1, Protocol2, Scope).

To find which objects or categories implement which protocols we can
call the :ref:`predicates_implements_protocol_2_3` built-in predicates:

.. code-block:: text

   | ?- implements_protocol(ObjectOrCategory, Protocol).

or, if we also want to know the implementation scope:

.. code-block:: text

   | ?- implements_protocol(ObjectOrCategory, Protocol, Scope).

Note that, if we use a non-instantiated variable for the first argument,
we will need to use the :ref:`predicates_current_object_1` or
:ref:`predicates_current_category_1`
built-in predicates to identify the kind of entity returned.

.. _protocols_properties:

Protocol properties
-------------------

We can find the properties of defined protocols by calling the
:ref:`predicates_protocol_property_2` built-in predicate:

.. code-block:: text

   | ?- protocol_property(Protocol, Property).

A protocol may have the property ``static``, ``dynamic``, or
``built_in``. Dynamic protocols can be abolished in runtime by calling
the :ref:`predicates_abolish_protocol_1`
built-in predicate. Depending on the :term:`backend Prolog compiler`, a
protocol may have additional properties related to the source file where
it is defined.

The following protocol properties are supported:

``static``
   The protocol is static
``dynamic``
   The protocol is dynamic (and thus can be abolished in runtime by
   вызова встроенного предиката :ref:`predicates_abolish_category_1`)
``built-in``
   The protocol is a built-in protocol (and thus always available)
``source_data``
   Source data available for the protocol
``file(Path)``
   Absolute path of the source file defining the protocol (if
   такой есть)
``file(Basename, Directory)``
   Basename and directory of the source file defining the protocol (if
   такой имеется); ``Directory`` всегда заканчивается ``/``
``lines(BeginLine, EndLine)``
   Source file begin and end lines of the protocol definition (if
   applicable)
``public(Resources)``
   List of public predicates and operators declared by the protocol
``protected(Resources)``
   List of protected predicates and operators declared by the protocol
``private(Resources)``
   List of private predicates and operators declared by the protocol
``declares(Predicate, Properties)``
   List of :ref:`properties <grammar_entity_properties>` for a predicate declared by the protocol
``alias(Predicate, Properties)``
   List of :ref:`properties <grammar_entity_properties>` for a :term:`predicate alias` declared by the protocol
   (список свойств включает ``for(Original)``, ``from(Entity)``,
   ``non_terminal(NonTerminal)`` и ``line_count(Line)``, при этом ``Line``
   being the begin line of the alias directive)

Some of the properties such as line numbers are only available when the
protocol is defined in a source file compiled with the
:ref:`source_data <flag_source_data>` flag turned on.

.. _protocols_implementing:

Implementing protocols
----------------------

Any number of objects or categories can implement a protocol. The syntax
is very simple:

::

   :- object(Object,
       implements(Protocol)).
       ...
   :- end_object.

or, in the case of a category:

::

   :- category(Object,
       implements(Protocol)).
       ...
   :- end_category.

To make all public predicates declared via an implemented protocol
protected or to make all public and protected predicates private we
prefix the protocol's name with the corresponding keyword. Пример:

::

   :- object(Object,
       implements(private::Protocol)).
       ...
   :- end_object.

или:

::

   :- object(Object,
       implements(protected::Protocol)).
       ...
   :- end_object.

Пропуск этого ключевого слова эквивалентно записи:

::

   :- object(Object,
       implements(public::Protocol)).
       ...
   :- end_object.

The same rules applies to protocols implemented by categories.

.. _protocols_built_in:

Built-in protocols
------------------

Logtalk defines a set of built-in protocols that are always available
for any application.

.. _protocols_expanding:

The built-in protocol ``expanding``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The built-in :ref:`expanding <apis:expanding/0>` protocol declares
the :ref:`methods_term_expansion_2` and :ref:`methods_goal_expansion_2`
predicates. See the description of the :ref:`hook <flag_hook>`
compiler flag for more details.

.. _protocols_monitoring:

The built-in protocol ``monitoring``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The built-in :ref:`monitoring <apis:monitoring/0>` protocol declares the
:ref:`methods_before_3` and :ref:`methods_after_3` public event handler
predicates. See the :ref:`events_events` section for more details.

.. _protocols_forwarding:

The built-in protocol ``forwarding``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The built-in :ref:`forwarding <apis:forwarding/0>` protocol declares the
:ref:`methods_forward_1` user-defined message forwarding handler, which
is automatically called (if defined) by the runtime for any message that
the receiving object does not understand. See also the
:ref:`control_delegate_message_1` control construct.
